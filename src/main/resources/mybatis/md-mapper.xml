<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="Md">
	
	<select id="selectAll" resultType="kh.spring.dto.MdDTO">
		select * from md
	</select>
	
	<select id="selectAllReviewSort" resultType="kh.spring.dto.MdDTO">
		select nvl(review_count,0) review_count, m2.* from md m2 left outer join 
	    (select m.md_id, count(*) review_count from md m join md_review r on r.MD_ID = m.MD_ID group by m.md_id) a 
	    on m2.md_id = a.md_id
	    order by review_count desc, m2.md_id desc
	</select>
	
	<select id="selectAllNewSort" resultType="kh.spring.dto.MdDTO">
		select * from md order by md_id desc
	</select>
	
	<select id="selectAllCount" resultType="int">
		select count(*) from md
	</select>
	
	<select id="selectRegionCount" resultType="int">
		select count(*) from md where md_region = #{select}
	</select>
	
	<select id="selectAllByBound" resultType="kh.spring.dto.MdDTO">
		select * from (select md.*, row_number() over(order by md_id) rn from md)
		where rn between #{start} and #{end}
	</select>
	
	<select id="selectAllByBoundReviewSort" resultType="kh.spring.dto.MdDTO">
		select * from 
        (select review_sort.*, row_number() 
        over
        (order by review_count desc) rn 
        from (select nvl(review_count,0) review_count, m2.* from md m2 left outer join 
	    (select m.md_id, count(*) review_count from md m join md_review r on r.MD_ID = m.MD_ID group by m.md_id) a 
	    on m2.md_id = a.md_id
	    order by review_count desc, m2.md_id desc) review_sort) where rn between #{start} and #{end} order by rn
	</select>
	
	<select id="selectAllByBoundNewSort" resultType="kh.spring.dto.MdDTO">
		select * from (select md.*, row_number() over(order by md_id desc) rn from md) 
		where rn between #{start} and #{end}
	</select>
	
	<select id="selectRegionByBound" resultType="kh.spring.dto.MdDTO">
		select * from (select region.*, row_number() over(order by md_id) rn 
		from (select * from md where md_region = #{select}) region)
		where rn between #{start} and #{end}
	</select>
	
	<select id="selectRegionByBoundReviewSort" resultType="kh.spring.dto.MdDTO">
		select * from 
        (select review_sort.*, row_number() 
        over
        (order by review_count desc) rn 
        from (select nvl(review_count,0) review_count, m2.* from md m2 left outer join 
	    (select m.md_id, count(*) review_count from md m join md_review r on r.MD_ID = m.MD_ID group by m.md_id) a 
	    on m2.md_id = a.md_id where m2.md_region = #{select}
	    order by review_count desc, m2.md_id desc) review_sort) where rn between #{start} and #{end} order by rn
	</select>
	
	<select id="selectRegionByBoundNewSort" resultType="kh.spring.dto.MdDTO">
		select * from (select md.*, row_number() over(order by md_id desc) rn from md where md_region = #{select}) 
		where rn between #{start} and #{end}
	</select>
	
	<select id="selectMdDetailById" resultType="kh.spring.dto.MdDTO">
		select * from md where md_id = #{md_id}
	</select>
	
	<select id="selectSameRegionMdsExceptForSelectMd" resultType="kh.spring.dto.MdDTO">
		select * from (select target.*, row_number() over(order by md_id desc) rn 
		from (select * from md m where md_region = (select md_region from md where md_id = #{md_id}) and md_id != #{md_id} ) target) 
		where rn between 1 and 12
	</select>
	
	<select id="selectMdById" resultType="kh.spring.dto.MdDTO">
		select * from md where md_id = #{md_id}
	</select>
	
	<select id="checkMd" resultType="int">
		select count(*) from md where md_name=#{md_name}
	</select>
	
	<insert id="insertMd">
		insert into md values(md_id_seq.nextval, #{md_region},#{md_name},#{md_content},#{md_price},#{md_category},#{md_abv},#{md_image},#{md_detail_image})
	</insert>
	
	<delete id="deleteMd">
		delete from md where md_id = #{md_id}
	</delete>
	
	<update id="updateMd">
		update md set md_region=#{md_region}, md_name=#{md_name}, md_content=#{md_content}, md_price=#{md_price}, md_category=#{md_category}, 
		 md_abv=#{md_abv}, md_image=#{md_image}, md_detail_image=#{md_detail_image} where md_id = #{md_id}
	</update>
	
	<select id="selectByBoundNotReviewMdByMemberId" resultType="kh.spring.dto.MdAndReviewDTO">
		select * from 
		(select target.*, row_number() over(order by purchase_detail_delivery_date desc) as rn 
		from 
		(select 
		dpr.d_purchase_detail_id,
		dpr.d_purchase_id,
		dpr.purchase_detail_quantity,
		dpr.purchase_detail_price,
		dpr.purchase_detail_result,
		dpr.purchase_detail_delivery_date,
		dpr.purchase_id,
		dpr.p_member_id,
		dpr.md_review_id,
		m.md_id, -- 이거 수상함
		m.md_name, m.md_content, m.md_image
		from md m join 
		(
		select * from 
		(select 
		d.purchase_detail_id d_purchase_detail_id, d.purchase_id d_purchase_id, d.md_id d_md_id, d.purchase_detail_quantity,
		d.purchase_detail_price, d.purchase_detail_result, d.purchase_detail_delivery_date,
		p.purchase_id, p.member_id p_member_id
		from purchase_detail d 
		join purchase p 
		on d.purchase_id = p.purchase_id) dp 
		left outer join 
		md_review r 
		on dp.d_purchase_detail_id = r.purchase_detail_id
		order by d_purchase_id desc
		) dpr
		on m.md_id = dpr.d_md_id
		where p_member_id = #{member_id} -- 멤버 아이디로 구분
		and purchase_detail_result = 'Y' -- 배송결과 Y인것만
		<![CDATA[and floor((cast(purchase_detail_delivery_date as date)) - sysdate) <= 30]]> -- 배송완료일부터 30일 이전까지만
		and md_review_id is null) target) -- 상품 후기 안쓴것
		where rn between #{start} and #{end} -- 페이징 처리
	</select>

	<select id="selectByBoundReviewMdByMemberId" resultType="kh.spring.dto.MdAndReviewDTO">
		select * from 
		(select target.*, row_number() over(order by purchase_detail_delivery_date desc) as rn 
		from 
		(select 
		dpr.d_purchase_detail_id,
		dpr.d_purchase_id,
		dpr.purchase_detail_quantity,
		dpr.purchase_detail_price,
		dpr.purchase_detail_result,
		dpr.purchase_detail_delivery_date,
		dpr.purchase_id,
		dpr.p_member_id,
		dpr.md_review_id,
		m.md_id, -- 이거 수상함
		m.md_name, m.md_content, m.md_image
		from md m join 
		(
		select * from 
		(select 
		d.purchase_detail_id d_purchase_detail_id, d.purchase_id d_purchase_id, d.md_id d_md_id, d.purchase_detail_quantity,
		d.purchase_detail_price, d.purchase_detail_result, d.purchase_detail_delivery_date,
		p.purchase_id, p.member_id p_member_id
		from purchase_detail d 
		join purchase p 
		on d.purchase_id = p.purchase_id) dp 
		left outer join 
		md_review r 
		on dp.d_purchase_detail_id = r.purchase_detail_id
		order by d_purchase_id desc
		) dpr
		on m.md_id = dpr.d_md_id
		where p_member_id = #{member_id} -- 멤버 아이디로 구분
		and purchase_detail_result = 'Y' -- 배송결과 Y인것만
		<![CDATA[and floor((cast(purchase_detail_delivery_date as date)) - sysdate) <= 30]]> -- 배송완료일부터 30일 이전까지만
		and md_review_id is not null) target) -- 상품 후기 쓴것
		where rn between #{start} and #{end} -- 페이징 처리
	</select>

	<select id="selectByBoundNotReviewMdCountByMemberId" resultType="int">
		select count(*) from 
		(select target.*, row_number() over(order by purchase_detail_delivery_date desc) as rn 
		from 
		(select 
		dpr.d_purchase_detail_id,
		dpr.d_purchase_id,
		dpr.purchase_detail_quantity,
		dpr.purchase_detail_price,
		dpr.purchase_detail_result,
		dpr.purchase_detail_delivery_date,
		dpr.purchase_id,
		dpr.p_member_id,
		dpr.md_review_id,
		m.md_id, -- 이거 수상함
		m.md_name, m.md_content, m.md_image
		from md m join 
		(
		select * from 
		(select 
		d.purchase_detail_id d_purchase_detail_id, d.purchase_id d_purchase_id, d.md_id d_md_id, d.purchase_detail_quantity,
		d.purchase_detail_price, d.purchase_detail_result, d.purchase_detail_delivery_date,
		p.purchase_id, p.member_id p_member_id
		from purchase_detail d 
		join purchase p 
		on d.purchase_id = p.purchase_id) dp 
		left outer join 
		md_review r 
		on dp.d_purchase_detail_id = r.purchase_detail_id
		order by d_purchase_id desc
		) dpr
		on m.md_id = dpr.d_md_id
		where p_member_id = #{member_id} -- 멤버 아이디로 구분
		and purchase_detail_result = 'Y' -- 배송결과 Y인것만
		<![CDATA[and floor((cast(purchase_detail_delivery_date as date)) - sysdate) <= 30]]> -- 배송완료일부터 30일 이전까지만
		and md_review_id is null) target) -- 상품 후기 안쓴것
	</select>

	<select id="selectByBoundReviewMdCountByMemberId" resultType="int">
		select count(*) from 
		(select target.*, row_number() over(order by purchase_detail_delivery_date desc) as rn 
		from 
		(select 
		dpr.d_purchase_detail_id,
		dpr.d_purchase_id,
		dpr.purchase_detail_quantity,
		dpr.purchase_detail_price,
		dpr.purchase_detail_result,
		dpr.purchase_detail_delivery_date,
		dpr.purchase_id,
		dpr.p_member_id,
		dpr.md_review_id,
		m.md_id, -- 이거 수상함
		m.md_name, m.md_content, m.md_image
		from md m join 
		(
		select * from 
		(select 
		d.purchase_detail_id d_purchase_detail_id, d.purchase_id d_purchase_id, d.md_id d_md_id, d.purchase_detail_quantity,
		d.purchase_detail_price, d.purchase_detail_result, d.purchase_detail_delivery_date,
		p.purchase_id, p.member_id p_member_id
		from purchase_detail d 
		join purchase p 
		on d.purchase_id = p.purchase_id) dp 
		left outer join 
		md_review r 
		on dp.d_purchase_detail_id = r.purchase_detail_id
		order by d_purchase_id desc
		) dpr
		on m.md_id = dpr.d_md_id
		where p_member_id = #{member_id} -- 멤버 아이디로 구분
		and purchase_detail_result = 'Y' -- 배송결과 Y인것만
		<![CDATA[and floor((cast(purchase_detail_delivery_date as date)) - sysdate) <= 30]]> -- 배송완료일부터 30일 이전까지만
		and md_review_id is not null) target) -- 상품 후기 쓴것 
	</select>
	
	<select id="selectSearchResult" resultType="kh.spring.dto.MdDTO" >
		select * from (select md.*, row_number() over(order by md_id) rn from md where md_region like '%' || #{select} || '%' or md_name like '%' || #{select} || '%')
		where rn between #{start} and #{end}
	</select>
	
	<select id="selectSerchResultCount" resultType="int">
		SELECT count(*) FROM md WHERE md_region LIKE '%' || #{value} || '%' or md_name Like '%' || #{value} || '%'
	</select>
	
	<select id="selectAllSearchByBound" resultType="kh.spring.dto.MdDTO">
		select * from (select md.*, row_number() over(order by md_id) rn from md where md_region like '%' || #{select} || '%' or md_name like '%' || #{select} || '%')
		where rn between #{start} and #{end}
	</select>
	
	<select id="selectAllSearchByBoundReviewSort" resultType="kh.spring.dto.MdDTO">
		select * from 
        (select review_sort.*, row_number() 
        over
        (order by review_count desc) rn 
        from (select nvl(review_count,0) review_count, m2.* from md m2 left outer join 
	    (select m.md_id, count(*) review_count from md m join md_review r on r.MD_ID = m.MD_ID group by m.md_id) a 
	    on m2.md_id = a.md_id
	    WHERE md_region LIKE '%' || #{select} || '%' or md_name Like '%' || #{select} || '%'
	    order by review_count desc, m2.md_id desc) review_sort) where rn between #{start} and #{end} order by rn
	</select>
	
	<select id="selectAllSearchByBoundNewSort" resultType="kh.spring.dto.MdDTO">
		select * from (select md.*, row_number() over(order by md_id desc) rn from md WHERE md_region LIKE '%' || #{select} || '%' or md_name Like '%' || #{select} || '%') 
		where rn between #{start} and #{end}
	</select>
	
</mapper>